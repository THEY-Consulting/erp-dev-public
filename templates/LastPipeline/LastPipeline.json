{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"CardDataStorage": {
			"type": "string"
		},
		"ParticipantsSQL": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowFull",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowFull",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowFull')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowFull')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "[parameters('CardDataStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "CardData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Participants",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "CardData",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Contracts",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "Contracts"
						},
						{
							"name": "Participants"
						},
						{
							"name": "cleandate"
						},
						{
							"name": "cleanDates"
						},
						{
							"name": "cleanDatesForParticipants"
						}
					],
					"script": "source(output(\n\t\tCardHolderData as ({@ExpTime} as long, {@FileSequence} as long, {@InstID} as long, {@RecordCount} as long, {@Version} as double, Contract as ({@RecordCount} as long, CardCount as long, CompanyID as long, CompanyName as string, ContractEndTime as long, ContractStartTime as long, Ptcpt as (Amount as boolean, Blocked as boolean, CardType as long, CardValEndTime as long, CardValStartTime as long, CarportID as boolean, Cust_Card_ID as string, FirstName as string, LastName as string, Paid as string, Participant_ID as long)[], SAP_Cust_ID as string, SpaceCount as long)[], ExportTime as long, Inst_ID as long, Manfac_ID as boolean)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'xml',\n\tcontainer: 'erp2',\n\tvalidationMode: 'none',\n\tnamespaces: true) ~> CardData\ncleandate foldDown(unroll(CardHolderData.Contract, CardHolderData.Contract),\n\tmapColumn(\n\t\t{@RecordCount} = CardHolderData.Contract.{@RecordCount},\n\t\tCardCount = CardHolderData.Contract.CardCount,\n\t\tCompanyID = CardHolderData.Contract.CompanyID,\n\t\tCompanyName = CardHolderData.Contract.CompanyName,\n\t\tContractEndTime = CardHolderData.Contract.ContractEndTime,\n\t\tContractStartTime = CardHolderData.Contract.ContractStartTime,\n\t\tPtcpt = CardHolderData.Contract.Ptcpt,\n\t\tSAP_Cust_ID = CardHolderData.Contract.SAP_Cust_ID,\n\t\tSpaceCount = CardHolderData.Contract.SpaceCount,\n\t\tManfac_ID = CardHolderData.Manfac_ID,\n\t\tManfac_ID_Long\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Contracts\ncleanDates foldDown(unroll(Ptcpt, Ptcpt),\n\tmapColumn(\n\t\tAmount = Ptcpt.Amount,\n\t\tBlocked = Ptcpt.Blocked,\n\t\tCardType = Ptcpt.CardType,\n\t\tCardValEndTime = Ptcpt.CardValEndTime,\n\t\tCardValStartTime = Ptcpt.CardValStartTime,\n\t\tCarportID = Ptcpt.CarportID,\n\t\tCust_Card_ID = Ptcpt.Cust_Card_ID,\n\t\tFirstName = Ptcpt.FirstName,\n\t\tLastName = Ptcpt.LastName,\n\t\tPaid = Ptcpt.Paid,\n\t\tParticipant_ID = Ptcpt.Participant_ID,\n\t\tSAP_Cust_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Participants\nCardData derive({CardHolderData.ExportTimeDateString} = toTimestamp(toString(CardHolderData.ExportTime),\"yyyyMMddHHmmss\"),\n\t\tManfac_ID_Long = toLong(case(CardHolderData.Manfac_ID, 1 , 0))) ~> cleandate\nContracts derive(ContractEndTimeDate = toTimestamp(toString(ContractEndTime), 'yyyyMMddHHmmss'),\n\t\tContractStartTimeDate = toTimestamp(toString(ContractStartTime), 'yyyyMMddHHmmss')) ~> cleanDates\nParticipants derive(CardValEndTimeDate = toTimestamp(toString(CardValEndTime), 'yyyyMMddHHmmss'),\n\t\tCardValStartTimeDate = toTimestamp(toString(CardValStartTime), 'yyyyMMddHHmmss'),\n\t\tAmount_Long = toLong(case(Amount,1,0)),\n\t\tBlocked_Long = toLong(case(Blocked,1,0)),\n\t\tCarport_ID_Long = toLong(case(CarportID,1,0)),\n\t\tBlocked_String = toString(case(Blocked,\"Y\",\"N\"))) ~> cleanDatesForParticipants\ncleanDatesForParticipants sink(input(\n\t\tParticipant_ID as long,\n\t\tSAP_Cust_ID as string,\n\t\tCust_Card_ID as long,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tCardValStartTime as timestamp,\n\t\tCardValEndTime as timestamp,\n\t\tBlocked as string,\n\t\tPaid as string,\n\t\tCardType as integer,\n\t\tAmount as integer,\n\t\tCarportID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tParticipant_ID,\n\t\tSAP_Cust_ID,\n\t\tLastName,\n\t\tFirstName,\n\t\tCardValStartTime = CardValStartTimeDate,\n\t\tCardValEndTime = CardValEndTimeDate,\n\t\tPaid,\n\t\tCardType,\n\t\tAmount = Amount_Long,\n\t\tBlocked = Blocked_String,\n\t\tCarportID = Carport_ID_Long\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\ncleandate sink(input(\n\t\tManfac_ID as long,\n\t\tInst_ID as long,\n\t\tExportTime as string,\n\t\tVersion as string,\n\t\tRecordCount as long,\n\t\tExpTime as string,\n\t\tFileSequence as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tManfac_ID = Manfac_ID_Long,\n\t\tInst_ID = CardHolderData.{@InstID},\n\t\tExportTime = {CardHolderData.ExportTimeDateString},\n\t\tVersion = CardHolderData.{@Version},\n\t\tRecordCount = CardHolderData.{@RecordCount},\n\t\tExpTime = {CardHolderData.ExportTimeDateString},\n\t\tFileSequence = CardHolderData.{@FileSequence}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2\ncleanDates sink(input(\n\t\tCompanyID as long,\n\t\tManfac_ID as long,\n\t\tRecordCount as long,\n\t\tSAP_Cust_ID as string,\n\t\tCompanyName as string,\n\t\tContractStartTime as string,\n\t\tContractEndTime as string,\n\t\tCardCount as long,\n\t\tSpaceCount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCompanyID,\n\t\tSAP_Cust_ID,\n\t\tCompanyName,\n\t\tCardCount,\n\t\tSpaceCount,\n\t\tContractStartTime = ContractStartTimeDate,\n\t\tContractEndTime = ContractEndTimeDate,\n\t\tManfac_ID = Manfac_ID_Long,\n\t\tRecordCount = {@RecordCount}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Participants')]",
				"[concat(variables('factoryId'), '/datasets/CardData')]",
				"[concat(variables('factoryId'), '/datasets/Contracts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Participants')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('ParticipantsSQL')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Participant_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SAP_Cust_ID",
						"type": "varchar"
					},
					{
						"name": "Cust_Card_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "CardValStartTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CardValEndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Blocked",
						"type": "varchar"
					},
					{
						"name": "Paid",
						"type": "varchar"
					},
					{
						"name": "CardType",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Amount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CarportID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Participants"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CardData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('ParticipantsSQL')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Manfac_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Inst_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ExportTime",
						"type": "varchar"
					},
					{
						"name": "Version",
						"type": "varchar"
					},
					{
						"name": "RecordCount",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ExpTime",
						"type": "varchar"
					},
					{
						"name": "FileSequence",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CardHolderData"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contracts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('ParticipantsSQL')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CompanyID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Manfac_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "RecordCount",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SAP_Cust_ID",
						"type": "varchar"
					},
					{
						"name": "CompanyName",
						"type": "varchar"
					},
					{
						"name": "ContractStartTime",
						"type": "varchar"
					},
					{
						"name": "ContractEndTime",
						"type": "varchar"
					},
					{
						"name": "CardCount",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SpaceCount",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Contracts"
				}
			},
			"dependsOn": []
		}
	]
}